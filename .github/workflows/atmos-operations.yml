---
name: Atmos Individual Component Operations

"on":
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: 'plan'
      component:
        description: 'Component name (e.g., azure-resource-group-dev, azure-storage-account-general) - must be a concrete component instance'
        required: true
        type: string
      stack:
        description: 'Stack name (e.g., core-eus-dev)'
        required: true
        type: string

jobs:
  plan:
    name: üìã Plan - ${{ inputs.component }} in ${{ inputs.stack }}
    runs-on: ubuntu-latest
    environment: damian_ent_azure
    outputs:
      plan-summary: ${{ steps.plan-summary.outputs.summary }}
      components-list: ${{ steps.components.outputs.components }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install tabulate

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.9"

      - name: Setup Atmos
        uses: cloudposse/github-action-setup-atmos@v2
        with:
          install-wrapper: false

      - name: Configure Azure credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Terraform ARM environment variables
        run: |
          # Extract credentials from AZURE_CREDENTIALS secret and set ARM_* variables
          echo "Setting ARM environment variables for Terraform..."
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)

          # Set backend configuration variables
          echo "ATMOS_BACKEND_RESOURCE_GROUP=atmos-rsg-core" >> $GITHUB_ENV
          echo "ATMOS_BACKEND_STORAGE_ACCOUNT=statomicore" >> $GITHUB_ENV
          echo "ATMOS_BACKEND_CONTAINER=corestate" >> $GITHUB_ENV

          # Mask the sensitive values in logs
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"
          echo "::add-mask::$SUBSCRIPTION_ID"
          echo "::add-mask::$TENANT_ID"

          # Set environment variables
          echo "ARM_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$TENANT_ID" >> $GITHUB_ENV

      - name: Initialize Terraform backend
        run: |
          az storage account show-connection-string \
            --name statomicore \
            --resource-group atmos-rsg-core \
            --output tsv > /dev/null

      - name: Validate inputs
        run: |
          echo "üîç Validating operation inputs..."
          echo "Action: ${{ inputs.action }}"
          echo "Component: ${{ inputs.component }}"
          echo "Stack: ${{ inputs.stack }}"

          # Change to atmos directory where atmos.yaml is located
          cd atmos

          if ! atmos validate stacks; then
            echo "‚ùå Stack configuration validation failed"
            exit 1
          fi

          # Validate component exists in stack
          if ! atmos list components -s "${{ inputs.stack }}" | \
            grep -q "^${{ inputs.component }}$"; then
            echo "‚ùå Component ${{ inputs.component }} not found in stack ${{ inputs.stack }}"
            exit 1
          fi
          
          # Check if component is abstract
          if [ "${{ inputs.component }}" = "azure-app-service-plan" ] || [ "${{ inputs.component }}" = "azure-function-app" ] || [ "${{ inputs.component }}" = "azure-keyvault" ] || [ "${{ inputs.component }}" = "azure-storage-account" ] || [ "${{ inputs.component }}" = "azure-private-endpoint" ]; then
            echo "‚ùå Cannot operate on abstract component: ${{ inputs.component }}"
            echo "Abstract components cannot be provisioned directly. Use concrete component instances instead."
            echo "Available concrete instances in stack ${{ inputs.stack }}:"
            atmos list components -s "${{ inputs.stack }}" | grep "${{ inputs.component }}-" || echo "No concrete instances found"
            echo ""
            echo "üí° Tip: Use 'atmos-stack-operations' workflow for dependency-aware planning across multiple components"
            exit 1
          fi

      - name: Set component for planning
        id: components
        run: |
          echo "üîç Planning single component: ${{ inputs.component }}"
          echo "components=${{ inputs.component }}" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  Warning: Individual component planning may fail if terraform output references are not resolved"
          echo "üí° Consider using 'atmos-stack-operations' workflow for dependency-aware planning across multiple components"

      - name: Run Terraform Plan
        id: run-plan
        timeout-minutes: 10
        run: |
          echo "üìã Running Terraform plan for component: ${{ inputs.component }}"
          mkdir -p /tmp/plans
          cd atmos

          COMPONENT="${{ inputs.component }}"
          PLAN_FILE="/tmp/plans/$COMPONENT.plan"

          echo "üìã Planning component: $COMPONENT (timeout: 10 minutes)"
          
          # Run terraform plan with timeout
          timeout 600 atmos terraform plan "$COMPONENT" -s "${{ inputs.stack }}" \
            -no-color -input=false > "$PLAN_FILE" 2>&1 && PLAN_STATUS=$? || PLAN_STATUS=$?

          if [ $PLAN_STATUS -eq 0 ]; then
            echo "‚úÖ Plan completed for component: $COMPONENT"
          elif [ $PLAN_STATUS -eq 124 ]; then
            echo "‚è∞ Plan timed out for component: $COMPONENT (10 minutes)"
            echo "Component $COMPONENT timed out after 10 minutes" >> "$PLAN_FILE"
            exit 1
          else
            echo "‚ùå Plan failed for component: $COMPONENT"
            echo "Last 50 lines of output:"
            tail -50 "$PLAN_FILE"
            exit 1
          fi

      - name: Generate Plan Dashboard
        id: plan-summary
        run: |
          echo "üé® Generating plan dashboard..."

          # Create a combined dashboard for all components
          python3 - << 'EOF'
          import sys
          import os
          import glob
          from pathlib import Path

          # Add the scripts directory to the Python path
          sys.path.insert(0, 'scripts')

          # Import the dashboard generator module
          import parse_terraform_plan

          # Read all plan files
          component_plans = {}
          for plan_file in glob.glob('/tmp/plans/*.plan'):
              component = Path(plan_file).stem
              with open(plan_file, 'r') as f:
                  component_plans[component] = f.read()

          # Generate dashboard
          if component_plans:
              dashboard = parse_terraform_plan.generate_dashboard(component_plans)

              # Save to file and output
              with open('/tmp/plan-dashboard.md', 'w') as f:
                  f.write(dashboard)

              # Output for job summary (truncated if too long)
              if len(dashboard) > 50000:
                  summary = dashboard[:50000] + "\n\n... (truncated, see artifacts for full dashboard)"
              else:
                  summary = dashboard

              # Write to step summary
              with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
                  f.write(summary)

              print("Dashboard generated successfully!")
          else:
              print("No plans found to process")
          EOF

      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plans-${{ inputs.stack }}-${{ inputs.component }}
          path: |
            /tmp/plans/
            /tmp/plan-dashboard.md
          retention-days: 30

  apply-destroy:
    name: üöÄ ${{ inputs.action }} - ${{ inputs.component }} in ${{ inputs.stack }}
    runs-on: ubuntu-latest
    environment: damian_ent_azure
    needs: plan
    if: inputs.action != 'plan'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.9"

      - name: Setup Atmos
        uses: cloudposse/github-action-setup-atmos@v2
        with:
          install-wrapper: false

      - name: Configure Azure credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Terraform ARM environment variables
        run: |
          # Extract credentials from AZURE_CREDENTIALS secret and set ARM_* variables
          echo "Setting ARM environment variables for Terraform..."
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)

          # Set backend configuration variables
          echo "ATMOS_BACKEND_RESOURCE_GROUP=atmos-rsg-core" >> $GITHUB_ENV
          echo "ATMOS_BACKEND_STORAGE_ACCOUNT=statomicore" >> $GITHUB_ENV
          echo "ATMOS_BACKEND_CONTAINER=corestate" >> $GITHUB_ENV

          # Mask the sensitive values in logs
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"
          echo "::add-mask::$SUBSCRIPTION_ID"
          echo "::add-mask::$TENANT_ID"

          # Set environment variables
          echo "ARM_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$TENANT_ID" >> $GITHUB_ENV

      - name: Initialize Terraform backend
        run: |
          az storage account show-connection-string \
            --name statomicore \
            --resource-group atmos-rsg-core \
            --output tsv > /dev/null

      - name: Manual Approval Required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Manual Approval: ${{ inputs.action }} ${{ inputs.component }} in ${{ inputs.stack }}"
          issue-body: |
            ## üö® Manual Approval Required

            **Action**: ${{ inputs.action }}
            **Component**: ${{ inputs.component }}
            **Stack**: ${{ inputs.stack }}
            **Triggered by**: @${{ github.actor }}

            ### üìã Plan Summary
            Please review the plan summary from the previous job before approving.

            **‚ö†Ô∏è Warning**: This action will modify your infrastructure!

            ### üîç How to Review
            1. Check the plan dashboard in the previous job's summary
            2. Review the uploaded plan artifacts
            3. Ensure the changes are expected

            ### ‚úÖ Approval
            Comment with `/approve` to proceed or `/deny` to cancel.

      - name: Run Terraform Apply
        if: inputs.action == 'apply'
        run: |
          cd atmos
          echo "üöÄ Running Terraform apply in ${{ inputs.stack }}..."

          echo "üöÄ Applying single component: ${{ inputs.component }}"
          if ! atmos terraform apply "${{ inputs.component }}" \
            -s "${{ inputs.stack }}" -auto-approve; then
            echo "‚ùå Apply failed for component: ${{ inputs.component }}"
            exit 1
          fi
          echo "‚úÖ Apply completed for component: ${{ inputs.component }}"

      - name: Run Terraform Destroy
        if: inputs.action == 'destroy'
        run: |
          cd atmos
          echo "üî• Running Terraform destroy in ${{ inputs.stack }}..."

          echo "üî• Destroying single component: ${{ inputs.component }}"
          if ! atmos terraform destroy "${{ inputs.component }}" \
            -s "${{ inputs.stack }}" -auto-approve; then
            echo "‚ùå Destroy failed for component: ${{ inputs.component }}"
            exit 1
          fi
          echo "‚úÖ Destroy completed for component: ${{ inputs.component }}"

      - name: Upload Operation Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: >
            terraform-logs-${{ inputs.action }}-${{ inputs.component }}-${{
            inputs.stack }}
          path: |
            ~/.atmos/logs/
            /tmp/terraform-*.log
          retention-days: 30
