---
name: Atmos Component Validation

"on":
  pull_request:
    branches: [main]
    paths:
      - 'atmos/**'
  push:
    branches: [main]
    paths:
      - 'atmos/**'

permissions:
  contents: read           # Required to checkout code
  issues: write           # Required to create/update comments on issues  
  pull-requests: write    # Required to create/update comments on PRs
  actions: read           # Required to read workflow run details

jobs:
  validate-components:
    name: Validate Atmos Components
    runs-on: ubuntu-latest
    environment: damian_ent_azure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.9"

      - name: Setup Python and install Checkov
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Checkov
        run: |
          python -m pip install --upgrade pip
          pip install checkov
          checkov --version

      - name: Install Atmos
        run: |
          # Use GitHub CLI to get latest release (more reliable than curl/grep)
          ATMOS_VERSION=$(gh release view --repo cloudposse/atmos --json tagName --jq '.tagName')
          ATMOS_VERSION_NUM=${ATMOS_VERSION#v}
          echo "Installing Atmos version: $ATMOS_VERSION (numeric: $ATMOS_VERSION_NUM)"
          
          # Fallback to specific version if GitHub API fails
          if [ -z "$ATMOS_VERSION" ] || [ -z "$ATMOS_VERSION_NUM" ]; then
            echo "GitHub API failed, using fallback version"
            ATMOS_VERSION="v1.105.0"
            ATMOS_VERSION_NUM="1.105.0"
          fi
          
          # Create temp directory and download
          mkdir -p /tmp/atmos-install
          cd /tmp/atmos-install
          
          # Construct download URL
          DOWNLOAD_URL="https://github.com/cloudposse/atmos/releases/download/${ATMOS_VERSION}/atmos_${ATMOS_VERSION_NUM}_linux_amd64"
          echo "Download URL: $DOWNLOAD_URL"
          
          # Download and install binary directly
          curl -sSfL "$DOWNLOAD_URL" -o atmos
          chmod +x atmos
          sudo mv atmos /usr/local/bin/
          atmos version

      - name: Configure Azure credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set Terraform ARM environment variables
        run: |
          # Extract credentials from AZURE_CREDENTIALS secret and set ARM_* variables
          echo "Setting ARM environment variables for Terraform..."
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)
          
          # Mask the sensitive values in logs
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"
          echo "::add-mask::$SUBSCRIPTION_ID"
          echo "::add-mask::$TENANT_ID"
          
          # Set environment variables
          echo "ARM_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$TENANT_ID" >> $GITHUB_ENV

      - name: Setup Backend Configuration
        run: |
          echo "ATMOS_BACKEND_RESOURCE_GROUP=atmos-rsg-core" >> $GITHUB_ENV
          echo "ATMOS_BACKEND_STORAGE_ACCOUNT=statomicore" >> $GITHUB_ENV
          echo "ATMOS_BACKEND_CONTAINER=corestate" >> $GITHUB_ENV
          
      - name: Initialize Terraform backend
        run: |
          # Configure Terraform backend for state management
          az storage account show-connection-string \
            --name $ATMOS_BACKEND_STORAGE_ACCOUNT \
            --resource-group $ATMOS_BACKEND_RESOURCE_GROUP \
            --output tsv > /dev/null

      - name: Validate Terraform formatting
        run: |
          echo "🎨 Checking Terraform formatting..."
          cd atmos/components/terraform/modules
          find . -name "*.tf" -exec terraform fmt -check=true -diff=true {} + || {
            echo "❌ Terraform files are not properly formatted!"
            echo "Run 'terraform fmt -recursive' to fix formatting issues."
            exit 1
          }
          echo "✅ All Terraform files are properly formatted"

      - name: Validate Terraform syntax
        run: |
          echo "✅ Validating Terraform syntax..."
          cd atmos/components/terraform/modules
          for module_dir in */; do
            echo "Validating module: $module_dir"
            cd "$module_dir"
            terraform init -backend=false > /dev/null 2>&1
            if ! terraform validate; then
              echo "❌ Terraform validation failed for module: $module_dir"
              exit 1
            fi
            cd ..
          done
          echo "✅ All Terraform modules are syntactically valid"

      - name: Check for hardcoded values
        run: |
          echo "🔍 Checking for hardcoded sensitive values..."
          # Check for potential hardcoded secrets, IDs, and credentials
          HARDCODED_PATTERNS=(
            "subscription.*=.*['\"][0-9a-f-]{36}['\"]"
            "client_id.*=.*['\"][0-9a-f-]{36}['\"]"
            "tenant_id.*=.*['\"][0-9a-f-]{36}['\"]"
            "object_id.*=.*['\"][0-9a-f-]{36}['\"]"
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "secret.*=.*['\"][^'\"]{8,}['\"]"
            "key.*=.*['\"][A-Za-z0-9+/]{20,}['\"]"
            "token.*=.*['\"][A-Za-z0-9+/]{20,}['\"]"
          )
          
          FOUND_ISSUES=false
          
          # Search in Terraform files
          find atmos/components/terraform/modules -name "*.tf" -type f | while read -r file; do
            for pattern in "${HARDCODED_PATTERNS[@]}"; do
              if grep -Pi "$pattern" "$file"; then
                echo "❌ Potential hardcoded value found in $file"
                FOUND_ISSUES=true
              fi
            done
          done
          
          # Search in stack files 
          find atmos/stacks -name "*.yaml" -type f | while read -r file; do
            for pattern in "${HARDCODED_PATTERNS[@]}"; do
              if grep -Pi "$pattern" "$file"; then
                echo "❌ Potential hardcoded value found in $file"
                FOUND_ISSUES=true
              fi
            done
          done
          
          if [ "$FOUND_ISSUES" = true ]; then
            echo "❌ Hardcoded values detected! Please use variables or reference outputs instead."
            echo "Acceptable patterns:"
            echo "  - var.subscription_id"
            echo "  - \"\{{ (atmos.Component \"component-name\" .stack).outputs.value }}\""
            echo "  - Use PLACEHOLDER values with instructions in SETUP.md"
            exit 1
          fi
          
          echo "✅ No hardcoded sensitive values detected"

      - name: Validate stack configuration
        run: |
          echo "🔍 Validating Atmos stack configuration..."
          cd atmos
          atmos validate stacks

      - name: Run Checkov security scan
        run: |
          echo "🔒 Running Checkov security scan..."
          if ! ./scripts/checkov-scan.sh --all; then
            echo "❌ Security issues found! Please fix before merging."
            echo "Run './scripts/checkov-scan.sh --all --html' for detailed report."
            exit 1
          fi
          echo "✅ No critical security issues found"

      - name: Detect changed components
        id: detect-changes
        run: |
          # Get list of changed files in atmos directory
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only \
              origin/${{ github.base_ref }}...HEAD | \
              grep '^atmos/' || true)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | \
              grep '^atmos/' || true)
          fi

          echo "Changed files: $CHANGED_FILES"

          # Extract components and stacks from changed files
          COMPONENTS=""
          STACKS=""

          for file in $CHANGED_FILES; do
            if [[ $file =~ atmos/components/terraform/modules/([^/]+)/ ]];
            then
              COMPONENT="${BASH_REMATCH[1]}"
              COMPONENTS="$COMPONENTS $COMPONENT"
            elif [[ $file =~ atmos/stacks/.*/(.*).yaml$ ]]; then
              STACK="${BASH_REMATCH[1]}"
              if [[ ! $STACK =~ ^(mixins|defaults)$ ]]; then
                STACKS="$STACKS $STACK"
              fi
            fi
          done

          # Remove duplicates and clean up
          COMPONENTS=$(echo $COMPONENTS | tr ' ' '\n' | \
            sort -u | tr '\n' ' ' | xargs)
          STACKS=$(echo $STACKS | tr ' ' '\n' | \
            sort -u | tr '\n' ' ' | xargs)

          # Change to atmos directory for component listing
          cd atmos

          # If no specific stacks detected, use provided stack
          if [ -z "$STACKS" ]; then
            STACKS="core-eus-dev"
          fi

          # Get all components if "*" specified
          if [ "$COMPONENTS" = "*" ] || [ -z "$COMPONENTS" ]; then
            echo "🔍 Getting all components for stack: $STACKS"
            ALL_COMPONENTS=""
            for stack in $STACKS; do
              STACK_COMPONENTS=$(atmos list components -s "$stack" | \
                grep -v "^$" | sort | tr '\n' ' ')
              ALL_COMPONENTS="$ALL_COMPONENTS $STACK_COMPONENTS"
            done
            COMPONENTS=$(echo $ALL_COMPONENTS | tr ' ' '\n' | \
              sort -u | tr '\n' ' ' | xargs)
          fi

          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          echo "stacks=$STACKS" >> $GITHUB_OUTPUT

          echo "Detected components: $COMPONENTS"
          echo "Detected stacks: $STACKS"

      - name: Validate changed components
        if: >
          steps.detect-changes.outputs.components != '' ||
          steps.detect-changes.outputs.stacks != ''
        run: |
          COMPONENTS="${{ steps.detect-changes.outputs.components }}"
          STACKS="${{ steps.detect-changes.outputs.stacks }}"

          # If no specific stacks detected, use default stack
          if [ -z "$STACKS" ]; then
            STACKS="core-eus-dev"
          fi

          # If no specific components detected, validate all components
          # in detected stacks
          if [ -z "$COMPONENTS" ]; then
            echo "🔍 No components detected, validating stacks: $STACKS"
            for stack in $STACKS; do
              echo "📦 Validating all components in stack: $stack"
              if ! ./scripts/validate-all-stacks.sh $stack; then
                echo "❌ Validation failed for stack: $stack"
                exit 1
              fi
            done
          else
            echo "🔍 Validating specific components: $COMPONENTS"
            for component in $COMPONENTS; do
              for stack in $STACKS; do
                echo "📦 Validating $component in $stack"
                if ! ./scripts/validate-component.sh "$component" "$stack";
                then
                  echo "❌ Validation failed for $component in $stack"
                  exit 1
                fi
                
                # Run Checkov security scan on specific component
                echo "🔒 Running Checkov security scan on $component"
                if ! ./scripts/checkov-scan.sh "$component" "$stack"; then
                  echo "❌ Security issues found in $component - blocking merge"
                  exit 1
                fi
              done
            done
          fi

      - name: Run comprehensive validation on main branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🚀 Running comprehensive validation on main branch"
          ./scripts/validate-all-stacks.sh

      - name: Upload validation logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: validation-logs
          path: |
            /tmp/atmos-*.log
            ~/.atmos/logs/
            security/reports/
          retention-days: 7
          if-no-files-found: ignore

      - name: Comment PR with validation results
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues
              .listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Atmos Component Validation Failed')
            );

            const body = `## ❌ Atmos Component Validation Failed

            The Atmos component validation has failed for this PR.
            Please check the [workflow logs](https://github.com/${
              context.repo.owner}/${context.repo.repo}/actions/runs/${
              context.runId}) for details.

            Common issues:
            - Component configuration errors
            - Missing required variables
            - Terraform syntax errors
            - Stack inheritance issues
            - Security policy violations (Checkov)

            Please fix the issues and push your changes to re-trigger
            validation.`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
