import:
  - orgs/lazylabs/_defaults
  - catalog/azure-rsg/defaults
  - catalog/azure-rsg/mixins/dev
  - catalog/azure-vnet/defaults
  - catalog/azure-vnet/mixins/dev
  - catalog/azure-subnet/defaults
  - catalog/azure-subnet/mixins/dev
  - catalog/azure-nsg/defaults
  - catalog/azure-nsg/mixins/dev
  - catalog/azure-private-endpoint/defaults
  - catalog/azure-private-endpoint/mixins/dev
  - catalog/azure-storage-account/defaults
  - catalog/azure-storage-account/mixins/dev
  - catalog/azure-keyvault/defaults
  - catalog/azure-keyvault/mixins/dev
  - catalog/azure-app-service-plan/defaults
  - catalog/azure-app-service-plan/mixins/dev
  - catalog/azure-function-app/defaults
  - catalog/azure-function-app/mixins/dev
  - catalog/azure-user-managed-identity/defaults
  - catalog/azure-user-managed-identity/mixins/dev

vars:
  environment: "eus"
  stage: "dev"
  location: "eastus"
  # subscription_id inherited from org defaults

components:
  terraform:
    azure-resource-group:
      vars:
        name: "services"
        attributes: ["shared"]

    azure-vnet:
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "network"
        address_space: ["10.0.0.0/16"]
        dns_servers: ["168.63.129.16"]
        # Dynamic reference with calculated fallback based on naming convention  
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"

    azure-subnet:
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-vnet"
      vars:
        name: "web"
        address_prefixes: ["10.0.1.0/24"]
        # Reference the resource group and vnet components with fallback to calculated names
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        virtual_network_name: !terraform.output azure-vnet ".vnet_name"
        # Enable private endpoint network policies
        private_endpoint_network_policies: "Enabled"

    azure-nsg:
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-subnet"
      vars:
        name: "web"
        location: "eastus"
        # Reference the resource group component with fallback to calculated name
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        # Associate NSG with the subnet
        subnet_ids: 
          - !terraform.output azure-subnet ".subnet_id"

    # Multiple Private Endpoint Examples - Different Services with Different Configurations
    
    # Example 1: Storage Account Private Endpoint for Blob Service
    # azure-private-endpoint-storage-blob:
    #   metadata:
    #     component: azure-private-endpoint
    #   vars:
    #     name: "stgblob"
    #     attributes: ["blob"]
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
    #     private_connection_resource_id: "/subscriptions/{subscription-id}/resourceGroups/{rg}/providers/Microsoft.Storage/storageAccounts/{storage-account-name}"
    #     subresource_names: ["blob"]
    #     private_dns_zone_group:
    #       name: "storage-blob-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"]

    # Example 2: Storage Account Private Endpoint for File Service (same storage, different subresource)
    # azure-private-endpoint-storage-file:
    #   metadata:
    #     component: azure-private-endpoint
    #   vars:
    #     name: "stgfile"
    #     attributes: ["file"]
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
    #     private_connection_resource_id: "/subscriptions/{subscription-id}/resourceGroups/{rg}/providers/Microsoft.Storage/storageAccounts/{storage-account-name}"
    #     subresource_names: ["file"]
    #     private_dns_zone_group:
    #       name: "storage-file-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"]

    # Example 3: Key Vault Private Endpoint
    # azure-private-endpoint-keyvault:
    #   metadata:
    #     component: azure-private-endpoint
    #   vars:
    #     name: "keyvault"
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
    #     private_connection_resource_id: "/subscriptions/{subscription-id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/{keyvault-name}"
    #     subresource_names: ["vault"]
    #     private_dns_zone_group:
    #       name: "keyvault-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net"]

    # Example 4: SQL Database Private Endpoint with Manual Approval
    # azure-private-endpoint-sql:
    #   metadata:
    #     component: azure-private-endpoint
    #   vars:
    #     name: "sqldb"
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
    #     private_connection_resource_id: "/subscriptions/{subscription-id}/resourceGroups/{rg}/providers/Microsoft.Sql/servers/{sql-server-name}"
    #     subresource_names: ["sqlServer"]
    #     is_manual_connection: true
    #     request_message: "Please approve private endpoint connection for development environment"
    #     private_dns_zone_group:
    #       name: "sql-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net"]

    # Example 5: Cosmos DB Private Endpoint with Custom IP Configuration
    # azure-private-endpoint-cosmos:
    #   metadata:
    #     component: azure-private-endpoint
    #   vars:
    #     name: "cosmos"
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
    #     private_connection_resource_id: "/subscriptions/{subscription-id}/resourceGroups/{rg}/providers/Microsoft.DocumentDB/databaseAccounts/{cosmos-account-name}"
    #     subresource_names: ["sql"]
    #     ip_configurations:
    #       - name: "cosmos-ip-config"
    #         private_ip_address: "10.0.1.100"
    #         subresource_name: "sql"
    #     private_dns_zone_group:
    #       name: "cosmos-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.documents.azure.com"]

    # =============================================================================
    # AZURE STORAGE ACCOUNT EXAMPLES
    # =============================================================================

    # Example 1: Standard V2 Storage Account with Blob Services Only
    azure-storage-account-general:
      metadata:
        component: azure-storage-account
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "general"
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        # Disable private endpoints for now
        create_private_endpoints: false

    # Example 2: Storage Account (will add private endpoints separately)
    azure-storage-account-private:
      metadata:
        component: azure-storage-account
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "private"
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        # Disable integrated private endpoints due to module compatibility
        create_private_endpoints: false

    # Example 3: Data Lake Gen2 Storage Account (will add private endpoints separately)
    azure-storage-account-datalake:
      metadata:
        component: azure-storage-account
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "datalake"
        attributes: ["adls"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        
        # Data Lake Gen2 configuration
        account_kind: "StorageV2"
        account_tier: "Standard"
        account_replication_type: "GRS"
        is_hns_enabled: true  # Enable hierarchical namespace for Data Lake Gen2
        
        # Enable blob services for Data Lake
        enabled_services:
          - "blob"
        
        # Disable integrated private endpoints due to module compatibility
        create_private_endpoints: false

    # Private Endpoint for Standard Storage Account - Blob Service
    azure-private-endpoint-storage-blob:
      metadata:
        component: azure-private-endpoint
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-subnet"
          3:
            component: "azure-storage-account-private"
      vars:
        name: "stgblob"
        attributes: ["blob"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        subnet_id: !terraform.output azure-subnet ".subnet_id"
        private_connection_resource_id: !terraform.output azure-storage-account-private ".storage_account_id"
        subresource_names: ["blob"]
        is_manual_connection: false

    # Private Endpoint for Data Lake Storage Account - Blob Service
    azure-private-endpoint-datalake-blob:
      metadata:
        component: azure-private-endpoint
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-subnet"
          3:
            component: "azure-storage-account-datalake"
      vars:
        name: "dlblob"
        attributes: ["blob"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        subnet_id: !terraform.output azure-subnet ".subnet_id"
        private_connection_resource_id: !terraform.output azure-storage-account-datalake ".storage_account_id"
        subresource_names: ["blob"]
        is_manual_connection: false

    # Private Endpoint for Data Lake Storage Account - DFS Service
    azure-private-endpoint-datalake-dfs:
      metadata:
        component: azure-private-endpoint
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-subnet"
          3:
            component: "azure-storage-account-datalake"
      vars:
        name: "dldfs"
        attributes: ["dfs"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        subnet_id: !terraform.output azure-subnet ".subnet_id"
        private_connection_resource_id: !terraform.output azure-storage-account-datalake ".storage_account_id"
        subresource_names: ["dfs"]
        is_manual_connection: false

    # =============================================================================
    # AZURE KEY VAULT EXAMPLES
    # =============================================================================

    # Example 1: Development Key Vault with Basic Configuration
    azure-keyvault-dev:
      metadata:
        component: azure-keyvault
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "secrets"
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        
        # Disable current user access to avoid Azure AD permission issues
        add_current_user_access: false
        
        # Add explicit access policy for the current service principal
        access_policies:
          current-sp:
            object_id: "YOUR_SERVICE_PRINCIPAL_OBJECT_ID"
            key_permissions: ["Get", "List", "Update", "Create", "Import", "Delete", "Recover", "Backup", "Restore", "Decrypt", "Encrypt", "UnwrapKey", "WrapKey", "Verify", "Sign", "Purge"]
            secret_permissions: ["Get", "List", "Set", "Delete", "Recover", "Backup", "Restore", "Purge"]
            certificate_permissions: ["Get", "List", "Update", "Create", "Import", "Delete", "Recover", "Backup", "Restore", "ManageContacts", "ManageIssuers", "GetIssuers", "ListIssuers", "SetIssuers", "DeleteIssuers", "Purge"]
        
        # Development-friendly settings (overrides from dev mixin)
        public_network_access_enabled: true
        network_acls:
          default_action: "Allow"
          bypass: "AzureServices"
        
        # Additional development secrets
        secrets:
          database-connection:
            value: "Server=dev-sql.database.windows.net;Database=appdb;..."
            content_type: "connection-string"
          api-base-url:
            value: "https://api-dev.company.com"
            content_type: "url"

    # Example 2: Key Vault with Private Endpoint for Secure Access
    azure-keyvault-secure:
      metadata:
        component: azure-keyvault
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "secure"
        attributes: ["private"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        
        # Disable current user access to avoid Azure AD permission issues
        add_current_user_access: false
        
        # Add explicit access policy for the current service principal
        access_policies:
          current-sp:
            object_id: "YOUR_SERVICE_PRINCIPAL_OBJECT_ID"
            key_permissions: ["Get", "List", "Update", "Create", "Import", "Delete", "Recover", "Backup", "Restore", "Decrypt", "Encrypt", "UnwrapKey", "WrapKey", "Verify", "Sign", "Purge"]
            secret_permissions: ["Get", "List", "Set", "Delete", "Recover", "Backup", "Restore", "Purge"]
            certificate_permissions: ["Get", "List", "Update", "Create", "Import", "Delete", "Recover", "Backup", "Restore", "ManageContacts", "ManageIssuers", "GetIssuers", "ListIssuers", "SetIssuers", "DeleteIssuers", "Purge"]
        
        # Secure configuration with private endpoint access only
        public_network_access_enabled: false
        network_acls:
          default_action: "Deny"
          bypass: "AzureServices"
          # Note: Subnet would need service endpoint for Microsoft.KeyVault to use subnet_ids
          # Enable this when the subnet has Microsoft.KeyVault service endpoint configured
          # virtual_network_subnet_ids: [!terraform.output 'azure-subnet ".subnet_id // ""mock-subnet-id"""']
        
        # Application-specific secrets
        secrets:
          jwt-signing-key:
            value: "your-super-secret-jwt-key-here"
            content_type: "jwt-key"
            expiration_date: "2025-12-31T23:59:59Z"
        
        # Encryption keys (manually created outside Terraform due to private endpoint access)

    # Private Endpoint for Secure Key Vault
    azure-private-endpoint-keyvault:
      metadata:
        component: azure-private-endpoint
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-subnet"
          3:
            component: "azure-keyvault-secure"
      vars:
        name: "kvsecure"
        attributes: ["vault"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        subnet_id: !terraform.output azure-subnet ".subnet_id"
        private_connection_resource_id: !terraform.output azure-keyvault-secure ".key_vault_id"
        subresource_names: ["vault"]
        is_manual_connection: false

    # =============================================================================
    # AZURE APP SERVICE PLAN EXAMPLES
    # =============================================================================

    # Example 1: Basic App Service Plan for Web Applications
    azure-app-service-plan-web:
      metadata:
        component: azure-app-service-plan
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "webapp"
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        os_type: "Linux"
        sku_name: "B1"
        worker_count: 1

    # Example 2: Premium App Service Plan for Production Workloads
    azure-app-service-plan-api:
      metadata:
        component: azure-app-service-plan
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "api"
        attributes: ["premium"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        os_type: "Linux"
        sku_name: "P1v3"
        worker_count: 2
        per_site_scaling_enabled: true
        zone_balancing_enabled: true

    # =============================================================================
    # AZURE FUNCTION APP EXAMPLES
    # =============================================================================

    # Example 1: Node.js Function App for API Services
    azure-function-app-api:
      metadata:
        component: azure-function-app
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-app-service-plan-web"
          3:
            component: "azure-storage-account-general"
      vars:
        name: "api"
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        service_plan_id: !terraform.output azure-app-service-plan-web ".app_service_plan_id"
        storage_account_name: !terraform.output azure-storage-account-general ".storage_account_name"
        storage_account_access_key: !terraform.output azure-storage-account-general ".storage_account_primary_access_key"
        os_type: "Linux"
        functions_worker_runtime: "node"
        application_stack:
          node_version: "18"

    # Example 2: Python Function App for Data Processing
    azure-function-app-processor:
      metadata:
        component: azure-function-app
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
          2:
            component: "azure-app-service-plan-api"
          3:
            component: "azure-storage-account-general"
      vars:
        name: "processor"
        attributes: ["python"]
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"
        service_plan_id: !terraform.output azure-app-service-plan-api ".app_service_plan_id"
        storage_account_name: !terraform.output azure-storage-account-general ".storage_account_name"
        storage_account_access_key: !terraform.output azure-storage-account-general ".storage_account_primary_access_key"
        os_type: "Linux"
        functions_worker_runtime: "python"
        application_stack:
          python_version: "3.11"
        always_on: true
        app_settings:
          PYTHON_VERSION: "3.11"
          ENABLE_ORYX_BUILD: "true"

    # =============================================================================
    # AZURE USER MANAGED IDENTITY EXAMPLES
    # =============================================================================

    # Example 1: User Managed Identity for Function Apps
    azure-user-managed-identity-functions:
      metadata:
        component: azure-user-managed-identity
      settings:
        depends_on:
          1:
            component: "azure-resource-group"
      vars:
        name: "functions"
        location: "eastus"
        resource_group_name: !terraform.output azure-resource-group ".resource_group_name"

    # Example 2: Data Lake Gen2 Storage Account
    # azure-storage-account-datalake:
    #   vars:
    #     name: "datalake"
    #     attributes: ["adls"]
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     
    #     # Data Lake Gen2 configuration
    #     account_kind: "StorageV2"
    #     account_tier: "Standard"
    #     account_replication_type: "GRS"
    #     is_hns_enabled: true  # Enable hierarchical namespace for Data Lake Gen2
    #     
    #     # Enable blob and dfs services for Data Lake
    #     enabled_services:
    #       - "blob"
    #     
    #     # Private endpoints for Data Lake services
    #     create_private_endpoints: true
    #     private_endpoint_services:
    #       - "blob"
    #       - "dfs"  # Data Lake File System endpoint
    #     private_endpoint_subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
    #     
    #     # DNS zone groups for Data Lake endpoints
    #     private_endpoint_dns_zone_group_blob:
    #       name: "datalake-blob-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"]
    #     
    #     private_endpoint_dns_zone_group_dfs:
    #       name: "datalake-dfs-dns-zone-group"
    #       private_dns_zone_ids: ["/subscriptions/{subscription-id}/resourceGroups/{dns-rg}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net"]

    # Example 3: Premium Block Blob Storage (High Performance)
    # azure-storage-account-premium:
    #   vars:
    #     name: "premium"
    #     attributes: ["highperf"]
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     
    #     # Premium Block Blob Storage configuration
    #     account_kind: "BlockBlobStorage"
    #     account_tier: "Premium"
    #     account_replication_type: "LRS"
    #     
    #     # Only blob service for BlockBlobStorage
    #     enabled_services:
    #       - "blob"
    #     
    #     # Enhanced blob properties for premium storage
    #     blob_properties:
    #       versioning_enabled: true
    #       change_feed_enabled: true
    #       change_feed_retention_in_days: 30
    #       last_access_time_enabled: true
    #     
    #     # Private endpoint for premium blob storage
    #     create_private_endpoints: true
    #     private_endpoint_services:
    #       - "blob"
    #     private_endpoint_subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"

    # Example 4: Multi-Service Storage Account with All Services
    # azure-storage-account-multiservice:
    #   vars:
    #     name: "multiservice"
    #     location: "${var.location}"
    #     resource_group_name: "${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}"
    #     
    #     # Standard V2 with all services
    #     account_kind: "StorageV2"
    #     account_tier: "Standard"
    #     account_replication_type: "GRS"
    #     
    #     # Enable all storage services
    #     enabled_services:
    #       - "blob"
    #       - "file"
    #       - "queue"
    #       - "table"
    #     
    #     # Queue service configuration
    #     queue_properties:
    #       logging:
    #         delete: true
    #         read: true
    #         write: true
    #         version: "1.0"
    #         retention_policy_days: 7
    #     
    #     # File share configuration
    #     share_properties:
    #       retention_policy:
    #         days: 14
    #       smb:
    #         versions: ["SMB3.0", "SMB3.1.1"]
    #         authentication_types: ["NTLMv2", "Kerberos"]
    #     
    #     # Private endpoints for all services
    #     create_private_endpoints: true
    #     private_endpoint_services:
    #       - "blob"
    #       - "file"
    #       - "queue"
    #       - "table"
    #     private_endpoint_subnet_id: "/subscriptions/{subscription-id}/resourceGroups/${var.environment}${var.stage}${components.terraform.azure-resource-group.vars.name}${var.namespace}/providers/Microsoft.Network/virtualNetworks/${var.environment}${var.stage}${components.terraform.azure-vnet.vars.name}${var.namespace}/subnets/${var.environment}${var.stage}${components.terraform.azure-subnet.vars.name}${var.namespace}"
